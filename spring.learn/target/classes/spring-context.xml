<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 基于注解开发的spring -->
    <!--告知spring再创建时，要扫描的包，用于创建bean对象-->
    <!-- 通过指定context进行扫描注解 -->
<!--    <context:component-scan base-package="spring.anoaction"></context:component-scan>-->
    <bean id="iaccountservice" class="spring.aop.service.impl.IAccountServiceImpl"></bean>
    <!-- spring基于xml配置AOP
        1. 把通知bean交给spring管理
        2. 使用AOP：config标签表明开始AOP配置
        3.使用AOP：aspect标签表明配置切面
            id:切面提供唯一标识
            ref:指定通知类bean的id
        4.在AOP:aspect标签的内部使用对应标签来配置通知的类型
            aop:befor 标签前置通知
                method属性：用于指定Logger类中哪个方法是前置通知.
        5.设置pointcut用于指定增强代码
        (切面表达式)
            关键字：execution
            表达式：访问修饰符 返回值 包名.包名.包名.方法名(参数列表)
                public void spring.aop.service.impl.IAccountServiceImpl.findAll()
            简化表达式：
                1. 访问修饰符可以省略
                2. 返回值和包名可以用通配符*表示任意包
                3. 包名可以用 ..表示当前包及其子包
                4. 类名和包名也可以用通配符进行表示
                5. 参数列表可以
                    基本数据类型：直接写数据
                    引用类型：用包名.类型表示 如String java.lang.string
                    可以用通配符表示任意参数
                    可以用..表示有参无参都有可以
               一般都只对service内的方法采用通配符，和返回类型采用通配符进行配置简化.

    -->
    <bean id="logger" class="spring.aop.Logger"></bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <!-- 配置通知类型和通知方法
            被增强代码为pointcut
            增强代码为 bean[id]=logger 对应的printLog方法。
         -->
        <aop:aspect id="logAdvice" ref="logger">
            <!--前置通知-->
            <aop:before method="printLog" pointcut="execution(public void spring.aop.service.impl.IAccountServiceImpl.findAll())"></aop:before>
            <!--后置通知-->
            <aop:after-returning method="printAfterLog" pointcut="execution(public void spring.aop.service.impl.IAccountServiceImpl.findAll())"></aop:after-returning>
            <!--最终通知-->
            <aop:after method="printFinallyLog" pointcut="execution(public void spring.aop.service.impl.IAccountServiceImpl.findAll())"></aop:after>
            <!--异常通知-->
            <aop:after-throwing method="printExpectionLog" pointcut="execution(public void spring.aop.service.impl.IAccountServiceImpl.findAll())"></aop:after-throwing>

        </aop:aspect>

    </aop:config>
</beans>